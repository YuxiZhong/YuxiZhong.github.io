<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Barren Island</title>
  
  
  <link href="http://yuxii.top/atom.xml" rel="self"/>
  
  <link href="http://yuxii.top/"/>
  <updated>2023-02-11T06:49:10.333Z</updated>
  <id>http://yuxii.top/</id>
  
  <author>
    <name>Yuxi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yuxii.top/post/0.html"/>
    <id>http://yuxii.top/post/0.html</id>
    <published>2023-02-11T06:47:43.377Z</published>
    <updated>2023-02-11T06:49:10.333Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Jane-Street-Blotto-Challenge"><a href="#Jane-Street-Blotto-Challenge" class="headerlink" title="Jane Street: Blotto Challenge!"></a><strong>Jane Street: Blotto Challenge!</strong></h2><p>At Jane Street, our day-to-day work involves figuring out what’s happening in financial markets and building algorithms and systems to do better trades. This often presents us with challenging and interesting problems. However, many of us also enjoy solving puzzles and playing games for their own sake. One game (technically, class of games) we like to play is called Blotto.</p><p>Here are 10 castles, numbered 1, 2, 3, … , 10, and worth 1, 2, 3, … , 10 points respectively. You have 100 soldiers, which you can allocate between the castles however you wish. Your opponent also (independently) does the same. The number of soldiers on each castle is then compared, and for each castle, whoever has the most soldiers on that castle wins its points. Additionally, you lose 0.2 points for each “extra” soldier that you have, in excess of your opponent’s army size, at each castle that you win. You still need to deploy all 100 soldiers. In the case of a tie, no one gets points for that castle.</p><p>See example below:</p><p><img src="https://pic2.zhimg.com/v2-8b6fc69db8c5ab1fb1ff2db22913c379_b.jpg" alt="img"></p><p>In this match, Alice wins castles 2, 4, 6, 9 and takes a 6-point penalty, for a total of 15 points, and Carol wins castles 1, 8, 10 and takes a 6-point penalty, for a total of 13 points (no one wins castles 3, 5, 7).</p><p><strong>We’re going to play a tournament. You get one entry and your final score is the average (mean) of your scores against all the other entries from applicants (plus a few of us, too!)</strong></p><p><strong>What’s your entry? How did you go about coming up with it? An entry should be submitted as a list of 10 non-negative integers, adding up to 100, where the nth element is the number of soldiers being sent to castle n.</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Jane-Street-Blotto-Challenge&quot;&gt;&lt;a href=&quot;#Jane-Street-Blotto-Challenge&quot; class=&quot;headerlink&quot; title=&quot;Jane Street: Blotto Challenge!&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>C++STL之哈希表</title>
    <link href="http://yuxii.top/post/751f48bb.html"/>
    <id>http://yuxii.top/post/751f48bb.html</id>
    <published>2023-02-10T15:45:38.000Z</published>
    <updated>2023-02-11T06:03:02.293Z</updated>
    
    <content type="html"><![CDATA[<p>C++ STL中，哈希表对应的容器是unordered_map（since C++ 11）。</p><p>STL中，<strong>map</strong> 对应的数据结构是 <strong>红黑树</strong>。红黑树是一种近似于平衡的二叉查找树，里面的数据是有序的。在红黑树上做查找操作的时间复杂度为 <strong>O(logN)</strong>。而 <strong>unordered_map</strong> 对应 <strong>哈希表</strong>，哈希表的特点就是查找效率高，时间复杂度为常数级别 <strong>O(1)</strong>， 而额外空间复杂度则要高出许多。所以对于需要高效率查询的情况，使用 unordered_map 容器。而如果对内存大小比较敏感或者数据存储要求有序的话，则可以用 map 容器。</p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul><li><p>unordered_map 是一种关联容器，用于存储由关键值 (Key Value，以下称为Key 值) 和映射值 (Mapped Value，以下称为映射值) 组成的元素，并且允许根据其 Key 值快速检索各个元素。</p></li><li><p>在 unordered_map 容器中，Key 值通常用来唯一标识元素，映射值是与该 Key 值关联内容的对象。Key 值与映射值的类型可能不同。</p></li><li><p>在 unordered_map 内部，元素没有按照其 Key 值与映射值的任何顺序进行排序 ，而是根据它们的 Hash 值组织成桶，允许它们通过其 Key 值直接快速访问单个元素（通常具有常数等级的平均时间复杂度）。</p></li><li><p>unordered_map 容器与 map 容器相比，通过 Key 值访问各个元素的速度更快，然而通过其元素子集进行范围迭代的效率通常较低。</p></li><li><p>unordered_map 实现了直接访问操作符 (operator[])，它允许使用 Key 值作为输入参数，直接访问映射值。</p></li><li><p>容器中的迭代器至少是前向迭代器。</p></li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li><p>引入头文件 <strong><unordered_map></strong> </p></li><li><p>unordered_map<key,value> m;</p></li><li><p>m.size();    //元素数量</p></li><li><p>m.insert(x);</p></li><li><p>m.find(key);</p><p>m.count(key);</p></li><li><p>m.erese(key);</p></li><li><p>m[key] → value</p></li></ul><h3 id="例"><a href="#例" class="headerlink" title="例"></a>例</h3><ul><li><p>基本使用</p>  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">unordered_map&lt;<span class="type">char</span>,<span class="type">int</span>&gt; m;</span><br><span class="line">m[<span class="string">&#x27;a&#x27;</span>] = <span class="number">9</span>;</span><br><span class="line">m[<span class="string">&#x27;?&#x27;</span>] = <span class="number">5</span>;</span><br><span class="line">m[<span class="string">&#x27;z&#x27;</span>] = <span class="number">99</span>;</span><br><span class="line">m[<span class="string">&#x27;A&#x27;</span>] = <span class="number">50</span>;</span><br><span class="line">m[<span class="string">&#x27;Z&#x27;</span>] = <span class="number">-2</span>;</span><br><span class="line">m[<span class="string">&#x27; &#x27;</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出元素个数</span></span><br><span class="line">    cout &lt;&lt; m.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找&#x27; &#x27;元素是否存在，若存在，输出其对应的值；</span></span><br><span class="line">    <span class="keyword">if</span>(m.<span class="built_in">count</span>(<span class="string">&#x27; &#x27;</span>) == <span class="number">1</span>)&#123;</span><br><span class="line">        cout &lt;&lt; m[<span class="string">&#x27; &#x27;</span>] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出内部所有元素，体现无序性</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it = m.<span class="built_in">begins</span>(); it != m.<span class="built_in">end</span>(); it++)&#123;</span><br><span class="line">        cout &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输出结果：</span><br><span class="line">6</span><br><span class="line">0</span><br><span class="line">Z -2</span><br><span class="line">  0</span><br><span class="line">A 50</span><br><span class="line">? 5</span><br><span class="line">z 99</span><br><span class="line">a 9</span><br></pre></td></tr></table></figure></li><li><p>Leetcode <a href="https://leetcode.cn/problems/two-sum/">1. 两数之和</a></p>  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;numbers, <span class="type">int</span> target)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//Key is the number and value is its index in the vector</span></span><br><span class="line">        unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; hash;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; result;</span><br><span class="line">        <span class="keyword">for</span> &lt;<span class="type">int</span> i = <span class="number">0</span>; i &lt; numbers.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="type">int</span> numberToFind = target - number[i];</span><br><span class="line">            <span class="comment">//if numberToFind is found in map, return them</span></span><br><span class="line">            <span class="keyword">if</span> (hash.<span class="built_in">find</span>(numberToFind) != hash.<span class="built_in">end</span>())&#123;</span><br><span class="line">                result.<span class="built_in">push_back</span>(hash[numberToFind);</span><br><span class="line">                result.<span class="built_in">push_back</span>(i);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">                hash[numbers[i]] = i;                      </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;                              </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;C++ STL中，哈希表对应的容器是unordered_map（since C++ 11）。&lt;/p&gt;
&lt;p&gt;STL中，&lt;strong&gt;map&lt;/strong&gt; 对应的数据结构是 &lt;strong&gt;红黑树&lt;/strong&gt;。红黑树是一种近似于平衡的二叉查找树，里面的数据是有序的</summary>
      
    
    
    
    
    <category term="C++ STL 数据结构 哈希表" scheme="http://yuxii.top/tags/C-STL-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>Hexo个人网站搭建记录</title>
    <link href="http://yuxii.top/post/7cfd23b7.html"/>
    <id>http://yuxii.top/post/7cfd23b7.html</id>
    <published>2023-02-03T13:43:42.000Z</published>
    <updated>2023-02-11T06:03:02.294Z</updated>
    
    <content type="html"><![CDATA[<h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><h3 id="生成markdown文件"><a href="#生成markdown文件" class="headerlink" title="生成markdown文件"></a>生成markdown文件</h3><p>发布博客文章，在命令行输入:</p><pre><code>hexo n &quot;文章标题&quot;</code></pre><p>在blog根目录下的source文件夹中的post文件夹中会多了一个 <strong>博客名字.md</strong> 的markdown文件，打开即可进行编辑</p><h3 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h3><p>markdown语法参考链接</p><p><a href="https://www.appinn.com/markdown/">Markdown语法说明（简体中文版）</a></p><h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><p>在文章中插入图片是个大麻烦</p><p>图床</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;发布文章&quot;&gt;&lt;a href=&quot;#发布文章&quot; class=&quot;headerlink&quot; title=&quot;发布文章&quot;&gt;&lt;/a&gt;发布文章&lt;/h2&gt;&lt;h3 id=&quot;生成markdown文件&quot;&gt;&lt;a href=&quot;#生成markdown文件&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>置顶</title>
    <link href="http://yuxii.top/post/cc4d5834.html"/>
    <id>http://yuxii.top/post/cc4d5834.html</id>
    <published>2022-10-14T09:35:04.533Z</published>
    <updated>2023-02-11T06:01:39.942Z</updated>
    
    <content type="html"><![CDATA[<h2 id="这是-Zhong-Yuxi-的一个无趣的网站，很高兴见到你"><a href="#这是-Zhong-Yuxi-的一个无趣的网站，很高兴见到你" class="headerlink" title="这是 Zhong Yuxi 的一个无趣的网站，很高兴见到你"></a>这是 Zhong Yuxi 的一个无趣的网站，很高兴见到你</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;这是-Zhong-Yuxi-的一个无趣的网站，很高兴见到你&quot;&gt;&lt;a href=&quot;#这是-Zhong-Yuxi-的一个无趣的网站，很高兴见到你&quot; class=&quot;headerlink&quot; title=&quot;这是 Zhong Yuxi 的一个无趣的网站，很高兴见到你&quot;&gt;&lt;/a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>NP问题</title>
    <link href="http://yuxii.top/post/41ef174f.html"/>
    <id>http://yuxii.top/post/41ef174f.html</id>
    <published>2022-08-05T03:50:36.000Z</published>
    <updated>2023-02-11T06:01:44.238Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NP问题"><a href="#NP问题" class="headerlink" title="NP问题"></a>NP问题</h1><ul><li><strong>NP问题</strong> 的全称是：Non deterministic Ploynomial问题，即非确定性多项式问题。</li><li><strong>多项式时间（Polynomial time）</strong> 在计算复杂度理论中，指的是一个问题的计算时间m(n)不大于问题大小n的多项式倍数。</li><li><p><strong>什么是非确定性问题？</strong> </p><p>  有些计算问题是确定性的，比如加减乘除之类，你只要按照公式推导，按部就班一步步来，就可以得到结果。但是，有些问题是无法按部就班直接地计算出来。比如，找大质数的问题。有没有一个公式，你一套公式，就可以一步步推算出来，下一个质数应该是多少呢？这样的公式是没有的。再比如，大的合数分解质因数的问题，有没有一个公式，把合数代进去，就直接可以算出，它的因子各自是多少？也没有这样的公式。</p><p>  这种问题的答案，是无法直接计算得到的，只能通过间接的“猜算”来得到结果。这也就是<em>非确定性问题</em>。而这些问题的通常有个算法，它不能直接告诉你答案是什么，但可以告诉你，某个可能的结果是正确的答案还是错误的。这个可以告诉你“猜算”的答案正确与否的算法，假如可以在多项式时间内算出来，就叫做<em>多项式非确定性问题</em>。</p></li><li><strong>NP问题</strong> 就是非确定性的多项式问题，也就是说，可以在多项式时间内验证一个解是否正确的问题是NP问题。</li><li><p><strong>P问题</strong> 是能在多项式时间内求出其解的问题，所有的P问题都是NP问题，但是是否P=NP，目前还没有被证明。</p><p>  （不是所有的NP问题都是难解的问题，比如数组排序的问题就是P类问题，但是P属于NP问题，所它也是NP问题，但是他并不难解。）</p></li><li><p><strong>NP困难问题：</strong> 对于一个判定问题A,如果所有的NP问题都可以多项式时间规约到A，那么这个问题就是NP困难问题。</p></li><li><p><strong>NPC问题：</strong> 对于一个NP问题A，如果所有的NP问题都可以多项式时间规约到A，那么这个问题就是NP困难问题。</p></li><li><p><strong>NPC</strong>，也称NP完全问题，它是NP问题的一个子类，比如哈密尔顿回路问题就是NPC问题。它是这样描述的，给定N个顶点，以及任意两个顶点之间的距离，求出一条回路，使其经过每个顶点，且回路的总距离最短。这个问题可以通过枚举求出解，但是他的时间复杂度是(N-1)!,随着N的增大，要计算解是不可能的。</p><p>  NPC有一种性质，那就是如果能证明NPC问题可以在多项式时间内求出其解，则所有的NP都可以在多项式时间内求解了，即P=NP成立。所以，我们一般认为NPC问题是难解的问题，因为他不太可能存在一个多项式时间的算法（如果存在则所有的NP问题都存在多项式时间算法，这太不可思议了，但是也不是不可能）。</p></li><li><p><strong>NP完全问题的证明:</strong> 要证明一个判定问题是NP完全的,只要在NP完全类中找到一个问题A,将这个问题归约到待证明问题即可.要证明问题是NP完全是很困难的,因为很多问题之间的转化过程是很难想到的.第一个被证明的NP完全问题是可满足性问题,它是判定一个合取范式的布尔公式F是否存在真值指派的问题.在很多NP完全问题的证明中,我们都可以用这个问题来归约,这里不再详述。</p></li></ul><hr><p>转自<a href="https://blog.csdn.net/zxj1988/article/details/6275458">CSDN博主zxj1988的文章</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;NP问题&quot;&gt;&lt;a href=&quot;#NP问题&quot; class=&quot;headerlink&quot; title=&quot;NP问题&quot;&gt;&lt;/a&gt;NP问题&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;NP问题&lt;/strong&gt; 的全称是：Non deterministic Ploynomial问</summary>
      
    
    
    
    
    <category term="学习 数学建模" scheme="http://yuxii.top/tags/%E5%AD%A6%E4%B9%A0-%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
    
  </entry>
  
</feed>
